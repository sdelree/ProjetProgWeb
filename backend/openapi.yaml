openapi: 3.0.1
info:
  title: WhereToPark Backend API
  description: 'The REST API that enables the WhereToPark frontend and backend apps to communicate.'
  version: 0.1.0
security:
  - jwtInCookie: []
tags:
  - name: parkings
    description: Information about Bordeaux\'s parkings
  - name: vehicles
    description: Details about vehicles saved on the backend
  - name: users
    description: Resource used to register, login and logout a user from the application.
  - name: favorites
    description: List of the up to 10 favorite parkings per user saved on the backend
paths:
  /parkings:
    get:
      tags:
        - parkings
      summary: Get a list of parkings along with their information
      description: This route can be used to get a list of parkings. The number of parkings returned can be limited by a query parameter.
      operationId: getParkings
      parameters:
        - name: limit
          in: query
          description: Maximum number of parkings that are to be returned.
          required: false
          style: form
          explode: true
          schema:
            type: number
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Parking'
        400:
          description: Invalid limit value
          content: {}
  /vehicles:
    get:
      tags:
        - vehicles
      summary: Get a list of the vehicles of the currently authenticated user.
      description: This route can be used to get a list of the vehicles created by the logged in user.
      operationId: getVehicles
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        401:
          description: The user is not logged in.
          content: {}
    post:
      tags:
        - vehicles
      summary: Add a new vehicle owner by the currently logged in user.
      description: This route can be used to add a new vehicle owned by the currently logged in user.
      operationId: addVehicle
      requestBody:
        description: The vehicle to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        401:
          description: The user is not logged in.
          content: {}
  /vehicles/{vehicleId}:
    get:
      tags:
        - vehicles
      summary: Get a vehicle.
      description: This route can be used to retrieve a specific vehicle.
      operationId: getVehicle
      parameters:
        - name: vehicleId
          in: path
          description: The id of the vehicle to retrieve.
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        401:
          description: The user is not logged in.
          content: {}
        403:
          description: The user can not access this vehicle.
          content: {}
        404:
          description: The vehicule designated by this id does not exist.
          content: {}
    put:
      tags:
        - vehicles
      summary: Update a vehicle.
      description: This route can be used to update a vehicle.
      operationId: updateVehicle
      parameters:
        - name: vehicleId
          in: path
          description: The id of the vehicle to update.
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        401:
          description: The user is not logged in.
          content: {}
        403:
          description: The user can not access this vehicle.
          content: {}
        404:
          description: The vehicule designated by this id does not exist.
          content: {}
    delete:
      tags:
        - vehicles
      summary: Delete a vehicle.
      description: This route can be used to delete a vehicle.
      operationId: removeVehicle
      parameters:
        - name: vehicleId
          in: path
          description: The id of the vehicle to delete.
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
      responses:
        204:
          description: Successful operation
          content: {}
        401:
          description: The user is not logged in.
          content: {}
        403:
          description: The user can not access this vehicle.
          content: {}
        404:
          description: The vehicule designated by this id does not exist.
          content: {}
  /users/register:
    post:
      tags:
        - users
      summary: Create a new user.
      description: This route can be used to register a new user into the app.
      operationId: registerUser
      requestBody:
        description: The credentials to user to create the user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: A user already exists for this email address.
          content: {}
  /users/login:
    post:
      tags:
        - users
      summary: Log an user in.
      description: This route can be used to log a user into the app.
      operationId: loginUser
      requestBody:
        description: The credentials to use to log the user in.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: Token=ab.cde123.45; Path=/; HttpOnly
        401:
          description: Bad credentials.
          content: {}
  /users/logout:
    post:
      tags:
        - users
      summary: Log an user out.
      description: This route can be used to log a user out of the app.
      operationId: logoutUser
      responses:
        204:
          description: Successful operation
  /users/isLoggedIn:
    post:
      tags:
        - users
      summary: Check that a user is logged in.
      description: This route can be used to check that a useris logged in. Can be used to check access token validity.
      operationId: checkLogin
      responses:
        204:
          description: Successful operation
        401:
          description: The user is not logged in.

  /favorites/:
    get:
      tags:
        - favorites
      summary: Get a list of the favorites of the currently authenticated user.
      description: This route can be used to get a list of the favorite parkings of the logged in user.
      operationId: getFavorites
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Favorite'
        401:
          description: The user is not logged in.
          content: {}
    post:
      tags:
        - favorites
      summary: Add a parking to favorites.
      description: This route can be used to add a parking to the favorite parkings list of the connected user.
      operationId: addFavorite
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        409:
          description: There is already 10 favorite Parkings.
          content: {}
  /favorites/{favoriteId}:
    put:
      tags:
        - favorites
      summary: Update a favorite parking.
      description: This route can be used to update the information about one of the favorite parkings of the connected user.
      operationId: updateFavorite
      parameters:
        - name: favoriteId
          in: path
          description: The id of the favorite to update.
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        401:
          description: The user is not logged in.
          content: {}
        403:
          description: The user can not access this favorite.
          content: {}
        404:
          description: This favorite doesn't exist.
          content: {}

    delete:
      tags:
        - favorites
      summary: Delete a favorite parking.
      description: This route can be used to delete one of favorite parkings of the connected user.
      operationId: deleteFavorite
      parameters:
        - name: favoriteId
          in: path
          description: The id of the favorite to delete.
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
      responses:
        204:
          description: Successful operation
          content: {}
        401:
          description: The user is not logged in.
          content: {}
        403:
          description: The user can not access this favorite.
          content: {}
        404:
          description: This favorite doesn't exist.
          content: {}

components:
  schemas:
    Parking:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        name:
          type: string
        prices:
          $ref: '#/components/schemas/ParkingPrices'
        location:
          $ref: '#/components/schemas/Coordinates'
        places:
          $ref: '#/components/schemas/ParkingPlaces'
        state:
          type: string
          enum:
            - full
            - free
        freePlaces:
          type: integer
          format: int64
        maxVehicleHeight:
          type: number
          format: float
    ParkingPrices:
      type: object
      properties:
        fifteenMinutes:
          type: number
          format: float
        halfAnHour:
          type: number
          format: float
        oneHour:
          type: number
          format: float
        twoHours:
          type: number
          format: float
        threeHours:
          type: number
          format: float
        fourHours:
          type: number
          format: float
        tenHours:
          type: number
          format: float
        twentyFourHours:
          type: number
          format: float
        night:
          type: number
          format: float
    ParkingPlaces:
      type: object
      properties:
        total:
          type: integer
          format: int64
        electric:
          type: integer
          format: int64
    Coordinates:
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number
    Vehicle:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        name:
          type: string
        isElectic:
          type: boolean
        height:
          type: number
          format: float
    ResourceId:
      type: string
    UserCredentials:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      properties:
        email:
          type: string
          format: email
    Favorite:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        name:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float

  securitySchemes:
    jwtInCookie:
      type: apiKey
      in: cookie
      name: JWTToken
